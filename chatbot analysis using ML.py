# -*- coding: utf-8 -*-
"""chatbot-using-ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IM06WMbUf4ZIs7tp4NNu-nl4DPxSq-Yv
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import re
import string
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
stop = set(stopwords.words('english'))
from wordcloud import WordCloud, STOPWORDS
import matplotlib as plty
import matplotlib.pyplot as plt
import seaborn as sns
from subprocess import check_output
import sklearn
# %matplotlib inline

testdata = pd.read_csv('sheet1.csv')

testdata.head()

response = pd.read_csv('sheet1.csv', usecols=('response_id','class',"response_text"))
application = pd.read_csv('sheet2.csv',encoding='latin-1')

response['class'].value_counts()

def cloud(text):
    wordcloud = WordCloud(background_color="white",stopwords=stop).generate(" ".join([i for i in text.str.upper()]))
    plt.imshow(wordcloud)
    plt.axis("off")
    plt.title("Chat Bot Response")
cloud(response['response_text'])

response['Label'] = Encode.fit_transform(response['class'])

response['Label'].value_counts()

"""**Naive Bayes**"""

x = response.response_text
y = response.Label

x_train,x_test,y_train,y_test = train_test_split(x,y,random_state=1)

from sklearn.feature_extraction.text import CountVectorizer
vect = CountVectorizer()
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
NB = MultinomialNB()

x_train_dtm = vect.fit_transform(x_train)
x_test_dtm = vect.transform(x_test)
NB.fit(x_train_dtm,y_train)
y_predict = NB.predict(x_test_dtm)

from sklearn import metrics
from sklearn.metrics import confusion_matrix

metrics.accuracy_score(y_test,y_predict)

"""**KMeans**"""

from sklearn.datasets import make_blobs

data = make_blobs(n_samples=200, n_features=2, 
                           centers=4, cluster_std=1.8,random_state=101)

plt.scatter(data[0][:,0],data[0][:,1],c=data[1],cmap='rainbow')

from sklearn.cluster import KMeans as k_means
kmeans = k_means(n_clusters=4)
kmeans.fit(data[0])

kmeans.cluster_centers_

kmeans.labels_

f, (ax1, ax2) = plt.subplots(1, 2, sharey=True,figsize=(10,6))
ax1.set_title('K Means')
ax1.scatter(data[0][:,0],data[0][:,1],c=kmeans.labels_,cmap='rainbow')
ax2.set_title("Original")
ax2.scatter(data[0][:,0],data[0][:,1],c=data[1],cmap='rainbow')

